import os

from dotenv import load_dotenv
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import ContextTypes, ConversationHandler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

ANALYZE_WAITING_FOR_QUERY = int(os.getenv("ANALYZE_WAITING_FOR_QUERY"))
SEARCH_WAITING_FOR_QUERY = int(os.getenv("SEARCH_WAITING_FOR_QUERY"))

def generate_main_menu():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π", callback_data="action_search")],
        [InlineKeyboardButton("üß© –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤", callback_data="action_analyze")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="action_about")]
    ]
    return InlineKeyboardMarkup(keyboard)


def generate_back_button():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="action_back")]])


async def send_menu(update, message: str, reply_markup=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é."""
    if update.message:
        await update.message.reply_text(message, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup)


async def display_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    reply_markup = generate_main_menu()
    await send_menu(update, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup)

async def handle_new_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    callback_data = update.callback_query.data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å (–ø–æ–∏—Å–∫ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑)
    if callback_data == "search_new_query":
        state = SEARCH_WAITING_FOR_QUERY
    elif callback_data == "analyze_new_query":
        state = ANALYZE_WAITING_FOR_QUERY
    else:
        # –ï—Å–ª–∏ –∫–æ–ª–ª–±—ç–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await display_main_menu(update, context)
        return ConversationHandler.END

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    await context.bot.send_message(
        chat_id=update.callback_query.message.chat_id,
        text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:"
    )
    return state

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await display_main_menu(update, context)
    return ConversationHandler.END
