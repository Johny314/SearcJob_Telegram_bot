import os

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from handlers.common import send_menu, generate_back_button
from services.database_service import get_last_searches, add_to_search_history
from services.search_service import fetch_vacancies

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

SEARCH_WAITING_FOR_QUERY = int(os.getenv("SEARCH_WAITING_FOR_QUERY"))

async def prompt_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —à–∞–≥: –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π.
    """
    user_id = update.callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history = await get_last_searches(user_id=user_id, limit=5)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    buttons = []
    for query in history:
        buttons.append([InlineKeyboardButton(query, callback_data=f"search_query_{query}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    buttons.append([InlineKeyboardButton("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="search_new_query")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="action_back")])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫
    reply_markup = InlineKeyboardMarkup(buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ
    await send_menu(update, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏:", reply_markup)
    return SEARCH_WAITING_FOR_QUERY


async def execute_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("is_processing", False):
        chat_id = update.message.chat_id if update.message else update.callback_query.message.chat_id
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
        )
        return SEARCH_WAITING_FOR_QUERY

    context.user_data["is_processing"] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    try:
        if update.message and update.message.text:
            query = update.message.text.strip()
            chat_id = update.message.chat_id
        elif update.callback_query and update.callback_query.data:
            query = update.callback_query.data.removeprefix("search_query_").strip()
            chat_id = update.callback_query.message.chat_id
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return SEARCH_WAITING_FOR_QUERY

        if not query:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            )
            return SEARCH_WAITING_FOR_QUERY

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        await add_to_search_history(user_id, query)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
        data = await fetch_vacancies(query=query, page=0, per_page=5)

        if data and data.get("items"):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–π
            results = []
            for item in data["items"]:
                name = item.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
                employer = item.get("employer", {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω")  # –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å
                city = item.get("area", {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω")  # –ì–æ—Ä–æ–¥
                salary = item.get("salary")  # –ó–∞—Ä–ø–ª–∞—Ç–∞
                url = item.get("alternate_url", "#")  # –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
                if salary:
                    if salary.get("from") and salary.get("to"):
                        salary = f"{salary['from']} - {salary['to']} {salary['currency']}"
                    elif salary.get("from"):
                        salary = f"–æ—Ç {salary['from']} {salary['currency']}"
                    elif salary.get("to"):
                        salary = f"–¥–æ {salary['to']} {salary['currency']}"
                    else:
                        salary = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                else:
                    salary = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

                # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
                vacancy_text = (
                    f"üìù <b>{name}</b>\n"
                    f"üè¢ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å: {employer}\n"
                    f"üìç –ì–æ—Ä–æ–¥: {city}\n"
                    f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary}\n"
                    f"üîó <a href='{url}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏</a>"
                )
                results.append(vacancy_text)

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç
            results_text = "\n\n".join(results)
        else:
            results_text = "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await context.bot.send_message(
            chat_id=chat_id,
            text=results_text,
            reply_markup=generate_back_button(),
            parse_mode="HTML",  # –£–∫–∞–∑—ã–≤–∞–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            disable_web_page_preview=True  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫
        )

    except Exception as e:
        await context.bot.send_message(chat_id=chat_id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    finally:
        context.user_data["is_processing"] = False

    return SEARCH_WAITING_FOR_QUERY



