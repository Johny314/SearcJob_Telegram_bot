import os

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from handlers.common import send_menu, generate_back_button
from services import (
    process_vacancies,
    add_to_search_history,
    fetch_vacancies
)

from services.database_service import get_last_searches

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

ANALYZE_WAITING_FOR_QUERY = int(os.getenv("ANALYZE_WAITING_FOR_QUERY"))

async def prompt_analyze_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≤—ã–∫–æ–≤ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.
    """
    user_id = update.callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history = await get_last_searches(user_id=user_id, limit=5)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏: —Å–Ω–∞—á–∞–ª–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏, –ø–æ—Ç–æ–º –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    buttons = []
    if history:
        for query in history:
            buttons.append([InlineKeyboardButton(query, callback_data=f"analyze_query_{query}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", callback_data="analyze_new_query")])
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="action_back")])

    reply_markup = InlineKeyboardMarkup(buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_menu(update, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≤—ã–∫–æ–≤:", reply_markup)
    return ANALYZE_WAITING_FOR_QUERY


async def execute_analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("is_processing", False):
        chat_id = update.message.chat_id if update.message else update.callback_query.message.chat_id
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
        )
        return ANALYZE_WAITING_FOR_QUERY

    context.user_data["is_processing"] = True

    try:
        if update.message and update.message.text:
            query = update.message.text.strip()
            chat_id = update.message.chat_id
        elif update.callback_query and update.callback_query.data:
            query = update.callback_query.data.removeprefix("analyze_query_").strip()
            chat_id = update.callback_query.message.chat_id
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return ANALYZE_WAITING_FOR_QUERY

        if not query:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            )
            return ANALYZE_WAITING_FOR_QUERY

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        await add_to_search_history(user_id, query)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_message = await context.bot.send_message(
            chat_id=chat_id,
            text="üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: 0%"
        )

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (vacancies)
        total_vacancies_to_fetch = 2000
        all_vacancies = []
        per_page = 100
        page = 0

        current_progress_text = progress_message.text

        while len(all_vacancies) < total_vacancies_to_fetch:
            data = await fetch_vacancies(query=query, page=page, per_page=per_page)
            if not data or "items" not in data:
                break

            all_vacancies.extend(data["items"])
            progress_percent = min(int(len(all_vacancies) / total_vacancies_to_fetch * 100), 100)

            new_progress_text = f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: {progress_percent}%"
            if current_progress_text != new_progress_text:
                try:
                    await progress_message.edit_text(text=new_progress_text)
                    current_progress_text = new_progress_text
                except Exception as e:
                    if "Message is not modified" in str(e):
                        pass
                    else:
                        raise

            if len(data["items"]) < per_page:
                break

            page += 1

        if not all_vacancies:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏.")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        await progress_message.edit_text(text="üîÑ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑...")

        # –ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π
        top_skills, total_vacancies = process_vacancies({"items": all_vacancies})

        if total_vacancies > 0 and top_skills:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            results = (
                f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</b>\n"
                f"‚úÖ <b>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π:</b> {total_vacancies}\n\n"
                f"<b>–¢–û–ü-10 –Ω–∞–≤—ã–∫–æ–≤:</b>\n"
            )
            for i, (skill, count) in enumerate(top_skills[:10], 1):
                results += f"  {i}. {skill.capitalize()} ‚Äî {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        else:
            results = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π."

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=progress_message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: {e}")

        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        await context.bot.send_message(
            chat_id=chat_id,
            text=results,
            reply_markup=generate_back_button(),
            parse_mode="HTML",
            disable_web_page_preview=True
        )

    except Exception as e:
        await context.bot.send_message(chat_id=chat_id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    finally:
        context.user_data["is_processing"] = False

    return ANALYZE_WAITING_FOR_QUERY