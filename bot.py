import os
from collections import Counter

import pandas as pd
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes, MessageHandler, filters,
)
from dotenv import load_dotenv

from search_service import search_vacancies
from database_service import add_to_search_history, get_last_searches
from analyze_service import analyze_skills, extract_skills

# Load environment variables
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# --- Bot Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Welcome the user and display buttons for actions."""
    user = update.effective_user
    await display_main_menu(update, context, f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")


async def display_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str):
    """Display the main menu with static action buttons."""
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π", callback_data="action_search")],
        [InlineKeyboardButton("üß© –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π", callback_data="action_analyze")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(message, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup)


async def handle_action_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """React to the user's main action choice and show the search menu."""
    query = update.callback_query
    user_id = query.from_user.id

    if query.data == "action_search":
        # Display the search query selection menu
        last_searches = get_last_searches(user_id)
        await switch_to_search_menu(query, last_searches, "search_", "–ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π")

    elif query.data == "action_analyze":
        # Display the analysis query selection menu
        last_searches = get_last_searches(user_id)
        await switch_to_search_menu(query, last_searches, "analyze_", "–∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π")


async def switch_to_search_menu(query, last_searches, callback_prefix, mode_label):
    """Display a menu of previously used queries or a button for a new query."""
    keyboard = []

    # Add buttons for the last searches (limit to 5 searches if needed)
    for search_query in last_searches[:5]:
        keyboard.append(
            [InlineKeyboardButton(search_query, callback_data=f"{callback_prefix}{search_query}")]
        )

    # Add button to create a new query
    keyboard.append([InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data=f"{callback_prefix}new")])

    # Send the message with the menu
    await query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {mode_label} –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def search_or_analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the search or analysis requests from user input or history."""
    query = update.callback_query
    user_id = query.from_user.id

    button_data = query.data
    mode = "search" if "search_" in button_data else "analyze"

    search_query = button_data.removeprefix("search_").removeprefix("analyze_")
    if search_query == "new":
        # Let the user input a new query
        await query.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è {'–ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π' if mode == 'search' else '–∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π'}:"
        )
        context.user_data["mode"] = mode
        context.user_data["waiting_for_input"] = True
    else:
        # Use the selected query for search or analysis
        if mode == "search":
            await perform_search(user_id, search_query, update, context)
        else:
            await perform_analysis(user_id, search_query, update, context)


async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle new queries typed by the user."""
    user_id = update.effective_user.id
    mode = context.user_data.get("mode")
    if mode and context.user_data.get("waiting_for_input"):
        search_query = update.message.text.strip()

        add_to_search_history(user_id, search_query)
        context.user_data["waiting_for_input"] = False

        if mode == "search":
            await perform_search(user_id, search_query, update, context)
        elif mode == "analyze":
            await perform_analysis(user_id, search_query, update, context)


async def perform_search(user_id, search_query, update, context):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    url = "https://api.hh.ru/vacancies"
    params = {"text": search_query, "per_page": 5}  # –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞

    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞
        vacancies = []
        for item in data.get("items", []):
            vacancy = f"{item['name']} - {item['employer']['name']}\n{item['alternate_url']}\n"
            vacancies.append(vacancy)

        if vacancies:
            search_results = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n" + "\n".join(vacancies)
        else:
            search_results = "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    except Exception as e:
        search_results = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}"

    await display_main_menu(update, context, search_results)


async def perform_analysis(user_id, search_query, update, context):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–≤—ã–∫–∞–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."""
    url = "https://api.hh.ru/vacancies"
    params = {"text": search_query, "per_page": 100}  # –£–≤–µ–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –Ω–∞–≤—ã–∫–∏ –∏–∑ –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        all_skills = []
        for vacancy in data.get("items", []):
            skills = extract_skills(vacancy)
            all_skills.extend(skills)

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ø –Ω–∞–≤—ã–∫–æ–≤
        skill_counts = Counter(all_skills)
        top_skills = skill_counts.most_common(10)  # –¢–æ–ø-10 –Ω–∞–≤—ã–∫–æ–≤

        if top_skills:
            analysis_results = "–¢–æ–ø-10 –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n\n" + \
                               "\n".join([f"{skill}: {count}" for skill, count in top_skills])
        else:
            analysis_results = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."

    except Exception as e:
        analysis_results = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}"

    await display_main_menu(update, context, analysis_results)


# --- Main Application ---
def main():
    """Run the bot application."""
    application = Application.builder().token(BOT_TOKEN).build()

    # Handlers for commands
    application.add_handler(CommandHandler("start", start))

    # Handlers for callback queries
    application.add_handler(CallbackQueryHandler(handle_action_selection, pattern="^action_"))
    application.add_handler(CallbackQueryHandler(search_or_analyze, pattern="^(search_|analyze_)"))

    # Handler for user text input
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), text_message_handler))

    # Start polling
    application.run_polling()


if __name__ == "__main__":
    main()